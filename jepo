#!/bin/bash

# jepo, a tool for synchronising git repositories
#
# Copyright (C) 2019 Josua Groeger.
#
# LICENSE
#
# jepo is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# jepo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with jepo.  If not, see <http://www.gnu.org/licenses/>.

working_dir=$(pwd)
jepo_dir=".jepo"

# define functions to be used in hook scripts
if [[ "$1" == "--hook-defs" ]]; then

  # remove and insert a PROPERTY entry in an mk file
  _jhookpriv_property_remove_insert () {
    property="$1"
    del_entry="$2"
    ins_entry="$3"
    insert="$4" # 0 for (remove and) insert, otherwise remove only
    in_file="$5"
    out_file="$6"
  
    lines=()
    inside_pp_block=0
    dels=0
    ins=0
    
    if [[ "$insert" == 0 ]]; then
      echo "Processing file \"$in_file\" (insert mode)..."
    else
      echo "Processing file \"$in_file\" (remove mode)..."
    fi
  
    if [[ ! -f "$in_file" ]]; then
      echo "  Error: File does not exist."
      return 1
    fi
    
    # insert one time ins_entry and remove all occurrences of del_entry
    while IFS='' read -r line; do
      if [[ "$inside_pp_block" == 1 && "$line" =~ "$del_entry" ]]; then
        ((dels++))
      else
        lines=("${lines[@]}" "$line")
      fi
    
      if [[ "$insert" == 0 && "$line" =~ $property.*+= ]]; then
        ((ins++))
        lines=("${lines[@]}" "    $ins_entry \\")
        insert=1
      fi
    
      if [[ "$line" =~ $property.*+= ]]; then
        inside_pp_block=1
      elif [[ ! "$line" =~ "\\" ]]; then
        inside_pp_block=0
      fi
    done < "$in_file"
    
    echo "  $dels occurrence(s) of \"$del_entry\" was/were removed."
    echo "  $ins occurrence(s) of \"$ins_entry\" was/were inserted."
    echo ""
  
    # write to out_file
    for line in "${lines[@]}";do
      echo "$line"
    done > "$out_file"
  }

  # copy from to, relative to the working directory
  _jhookpriv_file_copy () {
    from="$1"
    to="$2"
    echo "Copying (overwriting) \"$from\" to \"$to\"..."
    if [[ ! -e "$from" ]]; then
      echo "  Error: Source file or directory does not exist."
      return 1
    fi

    # case directory
    if [[ -d "$from" ]]; then
      rm -rf "$to"
      error="$?"
      if [[ "$error" == 0 ]]; then
        echo "  rm -rf terminates successfully."
      else
        echo "  rm -rf terminates with error code $error"
      fi
    
      mkdir -p "$to"
      error="$?"
      if [[ "$error" == 0 ]]; then
        echo "  mkdir -p terminates successfully."
      else
        echo "  mkdir -p terminates with error code $error"
      fi
    fi

    cp -rTH "$from" "$to"
    error="$?"
    if [[ "$error" == 0 ]]; then
      echo "  cp -rTH terminates successfully."
    else
      echo "  cp -rTH terminates with error code $error"
    fi
    return "$error"
  }

  jhook_package_remove () {
    package="$1"
    file="$2"
    _jhookpriv_property_remove_insert "PRODUCT_PACKAGES" "$package" "$package" 1 "$file" "$file"
  }
  
  jhook_package_insert () {
    package="$1"
    file="$2"
    _jhookpriv_property_remove_insert "PRODUCT_PACKAGES" "$package" "$package" 0 "$file" "$file"
  }

  jhook_property_override_remove () {
    override="$1"
    file="$2"
    _jhookpriv_property_remove_insert "PRODUCT_PROPERTY_OVERRIDES" "$override" "$override" 1 "$file" "$file"
  }
  
  jhook_property_override_insert () {
    override="$1"
    file="$2"
    _jhookpriv_property_remove_insert "PRODUCT_PROPERTY_OVERRIDES" "$override" "$override" 0 "$file" "$file"
  }

  # 'file' can be a regular file, directory or a link to either
  jhook_file_copy () {
    _jhookpriv_file_copy $(cat "$jepo_dir/hook-src/$1") "$2"
  }

  # append line to config file if argument does not exist, otherwise replace
  jhook_conf_argument () {
    file="$1"
    argument="$2"
    line="$3"
  
    if [[ -f "$file" ]]; then
      numlines=$(grep -c "$argument" "$file")
      if [[ "$numlines" -ne 0 ]]; then
        oldline=$(grep "$argument" "$file")
        echo "Removing the following line in $file:"
        echo "  $oldline"
        sed -i "/^$argument/d" "$file"
      fi
    else
      mkdir -p $(dirname "$file")
    fi
  
    echo "Appending the following line to $file:"
    echo "  $line"
    echo "$line" >> "$file"
  }

  jhook_package_add () {
    package="$1"
    subdir="$2"
    mkfile="$3"
    jhook_file_copy "$package" "$subdir/$package"
    ret1="$?"
    jhook_package_insert "$package" "$mkfile"
    ret2="$?"
    (( ret = $ret1 || $ret2 ))
    return $ret
  }

  return 0

# call itself and append to log file
elif [[ "$1" != "--no-log-file" ]]; then
  echo "Appending jepo stdout and stderr to log file:"
  echo "  $working_dir/jepo.log"
  echo ""
  echo "" >> jepo.log
  echo "==================================================" >> jepo.log
  echo "  jepo call on $(date)" >> jepo.log
  echo "==================================================" >> jepo.log
  echo "" >> jepo.log
  $0 --no-log-file $1 2>&1 | tee -a jepo.log
  exit $?
fi

arg="$2"

# initialise variables to store manifest contents
initialise_variables () {
  remotes=() # name tag
  declare -Ag remotes_fetch
  declare -Ag remotes_revision
  declare -Ag remotes_review
  
  projects=() # name tag
  declare -Ag projects_path
  declare -Ag projects_remote
  declare -Ag projects_cloneopts
  declare -Ag projects_branch
  
  copys=() # dest tag
  declare -Ag copys_src
  declare -Ag copys_project
  
  links=() # dest tag
  declare -Ag links_src
  declare -Ag links_project
  
  includes=() # name tag
}

# parse manifest file, given as $1
read_manifest_file () {
  read_dom () {
      local IFS=\>
      read -d \< ENTITY CONTENT
      local ret=$?
      TAG_NAME=${ENTITY%% *}
      ATTRIBUTES_SLASH=${ENTITY#* }
      ATTRIBUTES=$(echo ${ATTRIBUTES_SLASH%/}| sed "s/sync-c/sync_c/"| sed "s/sync-j/sync_j/"| sed "s/clone-depth/clone_depth/")
      if [[ "$CONTENT" == --\>* ]]; then # do not consider XML comments
        TAG_NAME=""
      fi
      return $ret
  }
  
  parse_dom () {
      name=""
      fetch=""
      revision=""
      review=""
      path=""
      remote=""
      src=""
      dest=""
      clone_depth=""
    if [[ "$TAG_NAME" == "remote" || $TAG_NAME == "default" ]]; then
      eval local "$ATTRIBUTES"
      if [[ "$TAG_NAME" == "default" ]]; then
        name="default"
        remotes_fetch["$name"]="$remote" # to be filled with real fetch from remote later
      else
        remotes_fetch["$name"]="$fetch"
      fi
      remotes=("${remotes[@]}" "$name")
      remotes_revision["$name"]="$revision"
      remotes_review["$name"]="$review"
    elif [[ "$TAG_NAME" == "project" ]]; then
      eval local "$ATTRIBUTES"
      if [[ ! -z "$revision" ]]; then # there exist projects with same name but different branch...
        name="$revision@$name"
      fi
      projects=("${projects[@]}" "$name")
      projects_path["$name"]="$path"
      projects_remote["$name"]="$remote"
      projects_branch["$name"]="$revision"
      if [[ ! -z "$clone_depth" ]]; then
        projects_cloneopts["$name"]="--progress --depth $clone_depth"
      else
        projects_cloneopts["$name"]="--progress"
      fi
      current_project="$name"
    elif [[ "$TAG_NAME" == "copyfile" ]]; then
      eval local "$ATTRIBUTES"
      copys=("${copys[@]}" "$dest")
      copys_src["$dest"]="$src"
      copys_project["$dest"]="$current_project"
    elif [[ "$TAG_NAME" == "linkfile" ]]; then
      eval local "$ATTRIBUTES"
      links=("${links[@]}" "$dest")
      links_src["$dest"]="$src"
      links_project["$dest"]="$current_project"
    elif [[ "$TAG_NAME" == "include" ]]; then
      eval local "$ATTRIBUTES"
      includes=("${includes[@]}" "$name")
    fi
  }
  
  while read_dom; do
    parse_dom
  done < "$1"
}

# fill "default" remote with data from its remote stored in "fetch"
# to be called after the last call to read_manifest_file
fill_default_remote () {
  default_remote="${remotes_fetch[default]}"
  remotes_fetch["default"]="${remotes_fetch[$default_remote]}"
  if [[ -z "${remotes_revision[default]}" ]]; then
    remotes_revision["default"]="${remotes_revision[$default_remote]}"
  fi
  if [[ -z "${remotes_review[default]}" ]]; then
    remotes_review["default"]="${remotes_review[$default_remote]}"
  fi
}

exit_help_manifest () {
    echo ""
    echo "Initialise jepo with a manifest file first:"
    echo "  $0 manifest_file"
    exit 1
}

echo "jepo tool called from working directory:"
echo "  $working_dir"

if [[ -z "$arg" ]]; then # no argument, expect to find stuff in $jepo_dir
  echo "with no manifest file argument."
  echo ""
  if [[ ! -d "$jepo_dir" ]]; then # no $jepo_dir, exit
    echo "Error: Sub-directory \"$jepo_dir\" of working directory does not exist."
    exit_help_manifest
  else # $jepo_dir, ok
    echo "Sub-directory \"$jepo_dir\" of working directory found."
    manifest_file="manifest.xml"
    manifest_dir="$working_dir/$jepo_dir"
    if [[ ! -f "$jepo_dir/$manifest_file" ]]; then
      echo "Error: Manifest file \"$jepo_dir/$manifest_file\" not found."
      exit_help_manifest
    else
      echo "Using manifest file \"$jepo_dir/$manifest_file\"."
      echo ""
    fi
  fi
else # argument exists, should be main manifest file
  echo "with manifest file argument:"
  echo "  $arg"
  echo ""
  if [[ ! -f "$arg" ]]; then
    echo "Error: File does not exist."
    exit 1
  fi
  manifest_file=$(basename "$arg")
  manifest_dir=$(dirname "$arg")
fi

cd "$manifest_dir"
echo "Change to manifest directory $manifest_dir."
echo ""

# parse manifest file, store contents in variables
# depth-1 inclusion of manifest files
initialise_variables
read_manifest_file "$manifest_file"
for inc in "${includes[@]}"; do
  if [[ ! -f "$inc" ]]; then
    echo "Error: File \"$inc\" to be included not found."
    exit 1
  else
    read_manifest_file "$inc"
  fi
done
fill_default_remote

echo "Finish parsing manifest files:"
echo "  $manifest_file"
for inc in "${includes[@]}"; do
  echo "  $inc"
done
echo "Found number of projects:"
echo "  ${#projects[@]}"
if [[ -d "$manifest_dir/jepo.d" ]]; then
  echo "Found jepo hook directory:"
  echo "  jepo.d/"
else
  echo "jepo hook directory \"jepo.d/\" was not found."
fi
if [[ -d "$manifest_dir/hook-src" ]]; then
  echo "Found hook source directory:"
  echo "  hook-src/"
else
  echo "hook source directory \"hook-src/\" was not found."
fi
if [[ -x "$manifest_dir/envsetup" ]]; then
  echo "Found \"envsetup\" executable:"
  echo "  envsetup"
else
  echo "\"envsetup\" executable was not found."
fi


echo ""
echo "Change to directory $working_dir (working directory)."
cd "$working_dir"
echo ""

create_jepo_dir () {
  echo "Creating directory \"$jepo_dir\" with directories and files from the manifest directory:"
  mkdir "$jepo_dir"
  cd "$jepo_dir"
  echo "  jepo"
  cp "$0" jepo
  chmod 755 jepo
  if [[ -d "$manifest_dir/jepo.d" ]]; then
    echo "  jepo.d/"
    cp -r "$manifest_dir/jepo.d" .
  fi
  if [[ -d "$manifest_dir/hook-src" ]]; then
    echo "  hook-src/"
    cp -r "$manifest_dir/hook-src" .
  fi
  if [[ -x "$manifest_dir/envsetup" ]]; then
    echo "  envsetup"
    cp "$manifest_dir/envsetup" .
  fi
  echo "  manifest.xml (from $manifest_file)"
  cp "$manifest_dir/$manifest_file" manifest.xml
  for inc in "${includes[@]}"; do
    echo "  $inc"
    mkdir -p $(dirname "$inc")
    cp "$manifest_dir"/"$inc" "$inc"
  done
  cd ..
  echo "Creating a symbolic link $jepo_dir/jepo -> jepo."
  [[ -f jepo ]] && rm jepo
  ln -s "$jepo_dir"/jepo .
  [[ -f envsetup ]] && rm envsetup
  if [[ -f "$jepo_dir"/envsetup ]]; then
    echo "Creating a symbolic link $jepo_dir/envsetup -> envsetup."
    ln -s "$jepo_dir"/envsetup .
  fi
}

ask_proceed () {
  echo "Do you want to proceed?"
  echo -n "[y/N]: "
  read YN
  if [[ "$YN" != "y" ]]; then
    echo "Apparently not, exiting."
    exit 0
  fi
  echo ""
}

if [[ ! -z "$arg" ]]; then # manifest file argument given
  if [[ ! -d "$jepo_dir" ]]; then # no jepo dir, copy stuff there
    echo "Sub-directory \"$jepo_dir\" of working directory does not exist."
    echo "About to create and populate it with the manifest files."
    echo ""
    ask_proceed
    create_jepo_dir
  else # jepo dir exists, overwrite?
    echo "jepo was called with a manifest file argument."
    echo "However, sub-directory \"$jepo_dir\" was found."
    if [[ ! -f "$jepo_dir"/manifest.xml ]]; then
      echo "  Info: File \"$jepo_dir/manifest.xml\" does not exist."
    else 
      diff_result=$(diff "$jepo_dir"/manifest.xml "$manifest_dir"/"$manifest_file")
      if [[ "$diff_result" != "" ]]; then
        echo "  Info: Files \"$jepo_dir/manifest.xml\" and \""$manifest_dir"/"$manifest_file"\" are different:"
        echo "$diff_result"
      else
        echo "  Info: Files \"$jepo_dir/manifest.xml\" and \""$manifest_dir"/"$manifest_file"\" are identical."
      fi
    fi
    echo "About to recreate \"$jepo_dir\" and populate it with the manifest files."
    echo ""
    ask_proceed
    echo "Removing directory \"$jepo_dir\"."
    rm -r "$jepo_dir"
    create_jepo_dir
  fi
  echo ""
fi

echo "About to synchronise ${#projects[@]} projects."
echo ""
ask_proceed

echo "  ====> STEP 1: Create directories and git clone/pull... <==="
echo ""

projects_git_failed=()
declare -Ag projects_failure

process_project () {
  project="$1"
  path="${projects_path[$project]}"
  remote="${projects_remote[$project]}"
  if [[ -z "$remote" ]]; then # no remote, use default
    remote="default"
  fi
  fetch="${remotes_fetch[$remote]}"

  revision_project="${projects_branch[$project]}"
  revision_project="${revision_project##*/}" # throw away refs/heads/ or refs/tags/
  revision_remote="${remotes_revision[$remote]}"
  revision_remote="${revision_remote##*/}" # throw away refs/heads/ or refs/tags/

  if [[ ! -z "$revision_project" ]]; then
    revision="$revision_project"
  else
    revision="$revision_remote"
  fi

  commit=""
  branch=""
  if [[ "$revision" =~ .*:.* ]]; then # revision contains a colon delimiter, commit = first part, branch = second part
    commit="${revision%%:*}"
    branch="${revision##*:}"
  elif [[ "$revision" =~ ^[a-f0-9]{40}$ ]]; then # revision is (an sha-1) commit, no colon delimiter
    commit="$revision"
    branch="$revision_remote"
  else # revision is a branch, no colon delimiter
    branch="$revision"
  fi

  if [[ -z "$branch" ]]; then # we need a branch
    branch="master"
  fi

  cloneopts="--branch $branch ${projects_cloneopts[$project]}"
  project_short=${project##*@} # remove branch@

  mkdir -vp "$path"
  if [[ -d "$path"/.git ]]; then # is git repository
    echo ".git directory found. Running"
    echo "cd $path && git checkout $branch && git pull origin $branch"
    echo ""
    cd "$path"
    git checkout "$branch" && git pull origin "$branch"
    exitcode="$?"
    if [[ "$exitcode" != 0 ]]; then
      projects_git_failed=("${projects_git_failed[@]}" "$project")
      projects_failure["$project"]="git pull ..."
    fi
    cd "$working_dir"
  else # not a git repository
    echo "No .git directory found. Running"
    echo "git clone $cloneopts"
    echo "  $fetch/$project_short $path"
    echo ""
    git clone $cloneopts $fetch/$project_short $path
    exitcode="$?"
    if [[ "$exitcode" != 0 ]]; then
      projects_git_failed=("${projects_git_failed[@]}" "$project")
      projects_failure["$project"]="git clone ..."
    fi
  fi
  echo ""

  if [[ "$exitcode" == 0 && ! -z "$commit" ]]; then # previous git command was successful and branch is commit
    echo "git checkout $commit"
    cd "$path"
    git checkout "$commit"
    if [[ "$?" != 0 ]]; then
      projects_git_failed=("${projects_git_failed[@]}" "$project")
      projects_failure["$project"]="git checkout ..."
    fi
    cd "$working_dir"
    echo ""
  fi
}

# loop through projects
num=0
for p in "${projects[@]}";do
  num=$((num + 1))
  echo "---> $((100 * $num / ${#projects[@]})) % ... project $num/${#projects[@]}: $p -> ${projects_path[$p]}"
  echo ""
  process_project "$p"
done

echo "  ====> STEP 1: Summary... <==="
echo ""

if [[ "${#projects_git_failed[@]}" == 0 ]]; then
  echo "All ${#projects[@]} projects were git cloned/pulled successfully."
  echo ""
else
  echo "git reported errors on ${#projects_git_failed[@]}/${#projects[@]} projects:"
  for p in "${projects_git_failed[@]}"; do
    echo "  $p -> ${projects_path[$p]} (${projects_failure[$p]})"
  done
  echo ""
  echo "Omitting STEP 2... fix errors and/or re-run script!"
  exit 1
fi

echo "  ====> STEP 2: Copy and link files... <==="
echo ""

# loop through copys
echo "Copying files..."
if [[ "${#copys[@]}" == 0 ]]; then
  echo "  (no files marked in manifest files)"
else
  for p in "${copys[@]}";do
    dest="$p"
    project="${copys_project[$p]}"
    path="${projects_path[$project]}"
    src="$path/${copys_src[$p]}"
    echo "  cp $src $dest"
    cp $src $dest
  done
fi
echo ""

# loop through links
echo "Linking files..."
if [[ "${#links[@]}" == 0 ]]; then
  echo "  (no files marked in manifest files)"
else
  for p in "${links[@]}";do
    dest="$p"
    project="${links_project[$p]}"
    path="${projects_path[$project]}"
    src="$path/${links_src[$p]}"
    echo "  ln -rsfT $src $dest"
    ln -rsfT $src $dest
  done
fi
echo ""

echo "  ====> STEP 3: Running jepo hook scripts... <==="
echo ""

hook_dir="$working_dir/$jepo_dir/jepo.d"
hook_scripts=()

if [[ ! -d "$hook_dir" ]]; then
  echo "jepo hook directory \"$hook_dir\" was not found."
  echo "Existing jepo now without running hook scripts."
  echo ""
  exit 0
fi

# look for executable files in hook dir

cd "$hook_dir"
for file in *; do
  if [[ -x "$file" ]]; then
    hook_scripts=("${hook_scripts[@]}" "$file")
  fi
done
cd "$working_dir"

echo "Found ${#hook_scripts[@]} executable files in hook directory $hook_dir/:"
if [[ "${#hook_scripts[@]}" == 0 ]]; then
  echo "  (no executable files found)"
else
  for file in "${hook_scripts[@]}"; do
    echo "  $file"
  done
fi
echo ""

# loop through hook scripts
hooks_failed=()
num=0
for file in "${hook_scripts[@]}"; do
  num=$((num + 1))
  echo "---> $((100 * $num / ${#hook_scripts[@]})) % ... running hook script $num/${#hook_scripts[@]}: $file"
  echo ""
  "$hook_dir/$file"
  error="$?"
  if [[ "$error" != 0 ]]; then
    echo ""
    echo "   ---> \"$file\" terminates with error code $error. <---"
    hooks_failed=("${hooks_failed[@]}" "$file")
  else
    echo ""
    echo "   ---> \"$file\" terminates successfully. <---"
  fi
  echo ""
done

echo "  ====> STEP 3: Summary... <==="
echo ""

if [[ "${#hooks_failed[@]}" == 0 ]]; then
  echo "All ${#hook_scripts[@]} hook scripts were run successfully."
  echo ""
else
  echo "Errors were reported by ${#hooks_failed[@]}/${#hook_scripts[@]} hook scripts:"
  for h in "${hooks_failed[@]}"; do
    echo "  $h"
  done
  echo ""
  echo "... fix errors and/or re-run script!"
  echo ""
  exit 1
fi

